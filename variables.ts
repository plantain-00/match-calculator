// @ts-nocheck
/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
import { createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, renderList as _renderList, toDisplayString as _toDisplayString } from 'vue'
// tslint:disable
/* eslint-disable */

export function generateMatchesTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", { class: "generate-matches" }, [
    _createVNode("div", {
      class: "editor",
      ref: "generateMatchesEditor"
    }, null, 512 /* NEED_PATCH */),
    (_ctx.errorMessage)
      ? (_openBlock(), _createBlock("div", {
          key: 0,
          class: "error-message"
        }, _toDisplayString(_ctx.errorMessage), 1 /* TEXT */))
      : _createCommentVNode("v-if", true),
    _createVNode("button", {
      onClick: _cache[1] || (_cache[1] = $event => (_ctx.generate()))
    }, "Generate"),
    _createVNode("div", {
      class: "editor",
      ref: "generateMatchesResultEditor"
    }, null, 512 /* NEED_PATCH */)
  ]))
}
export const groupsSchemaJson = {
    "$ref": "#/definitions/Groups",
    "definitions": {
        "Groups": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Group"
            },
            "uniqueItems": true,
            "minItems": 1
        },
        "Group": {
            "type": "object",
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Match"
                    },
                    "uniqueItems": true,
                    "minItems": 1
                },
                "teams": {
                    "$ref": "#/definitions/Teams"
                },
                "tops": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "minimum": 1
                    },
                    "uniqueItems": true,
                    "minItems": 1
                }
            },
            "required": [
                "matches",
                "teams",
                "tops"
            ],
            "additionalProperties": false
        },
        "Match": {
            "type": "object",
            "properties": {
                "a": {
                    "type": "string"
                },
                "b": {
                    "type": "string"
                },
                "possibilities": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "a": {
                                "type": "integer"
                            },
                            "b": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "a",
                            "b"
                        ],
                        "additionalProperties": false
                    },
                    "uniqueItems": true,
                    "minItems": 1
                }
            },
            "required": [
                "a",
                "b",
                "possibilities"
            ],
            "additionalProperties": false
        },
        "Teams": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "minItems": 1
        }
    }
}
export function indexTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", { class: "main" }, [
    _createVNode("div", {
      class: "editor",
      ref: "mainEditor"
    }, null, 512 /* NEED_PATCH */),
    (_ctx.errorMessage)
      ? (_openBlock(), _createBlock("div", {
          key: 0,
          class: "error-message"
        }, _toDisplayString(_ctx.errorMessage), 1 /* TEXT */))
      : _createCommentVNode("v-if", true),
    _createVNode("button", {
      onClick: _cache[1] || (_cache[1] = $event => (_ctx.calculate()))
    }, _toDisplayString(_ctx.progressText || "Calculate"), 1 /* TEXT */),
    _createVNode("div", { class: "result" }, [
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.result, (group, i) => {
        return (_openBlock(), _createBlock("table", { key: i }, [
          _createVNode("thead", null, [
            _createVNode("tr", null, [
              _createVNode("th", null, "group " + _toDisplayString(i + 1), 1 /* TEXT */),
              (_openBlock(true), _createBlock(_Fragment, null, _renderList(group.tops, (top, j) => {
                return (_openBlock(), _createBlock("th", { key: j }, "top " + _toDisplayString(top) + " chance(%)", 1 /* TEXT */))
              }), 128 /* KEYED_FRAGMENT */)),
              _createVNode("th", null, "score"),
              _createVNode("th", null, "match count left")
            ])
          ]),
          _createVNode("tbody", null, [
            (_openBlock(true), _createBlock(_Fragment, null, _renderList(group.chances, (team, j) => {
              return (_openBlock(), _createBlock("tr", { key: j }, [
                _createVNode("td", null, _toDisplayString(team.name), 1 /* TEXT */),
                (_openBlock(true), _createBlock(_Fragment, null, _renderList(team.chances, (chance, k) => {
                  return (_openBlock(), _createBlock("td", { key: k }, _toDisplayString(chance), 1 /* TEXT */))
                }), 128 /* KEYED_FRAGMENT */)),
                _createVNode("td", null, _toDisplayString(team.score), 1 /* TEXT */),
                _createVNode("td", null, _toDisplayString(team.matchCountLeft), 1 /* TEXT */)
              ]))
            }), 128 /* KEYED_FRAGMENT */))
          ])
        ]))
      }), 128 /* KEYED_FRAGMENT */))
    ])
  ]))
}
export const matchPossibilitySchemaJson = {
    "$ref": "#/definitions/MatchPossibilities",
    "definitions": {
        "MatchPossibilities": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/MatchPossibility"
            },
            "uniqueItems": true,
            "minItems": 1
        },
        "MatchPossibility": {
            "type": "object",
            "properties": {
                "teams": {
                    "$ref": "#/definitions/Teams"
                },
                "possibilities": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "a": {
                                "type": "integer"
                            },
                            "b": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "a",
                            "b"
                        ],
                        "additionalProperties": false
                    },
                    "uniqueItems": true,
                    "minItems": 1
                }
            },
            "required": [
                "teams",
                "possibilities"
            ],
            "additionalProperties": false
        },
        "Teams": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "minItems": 1
        }
    }
}
/* eslint-enable */
// tslint:enable
